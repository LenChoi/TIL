
1. 바운디드 컨텍스트의 변화

Command
시스템의 상태를 변경하는 작업을 수행하도록 요청

바운디드 컨텍스트에서 command는 사용자가 요청을 시작한 결과로 ui또는 프로세스 메니저가 에그리거트에 어떤 작업을 수행하도록 지시할 떄 발생

Event
OrderConfirmed와 같은 이벤트는 시스템에서 과게에 발생한 어떤 사건을 의미
일반적으로 에그리거트 내부에서 커멘드에 대한 처리의 결과로 발생
다수의 구독자가 특정 이벤트 구독 가능, 에그리거트는 event bus로 이벤트를 발행
Event handler는 특정 이벤트 타입을 이벤트 버스로 등록 할 수 있고, 각각의 subscriber로 이벤트를 전달
이 바운디드 컨텍스트에서 유일한 subscriber는 ProcessManager다

Process Manager
이것은 도메인 에그리거트의 행동을 cordinate한다.
이것은 에그리거트가 발행하는 이벤트를 구독하고 어떤 커멘드를 보낼지 결정하는 몇가직 규칙을 따른다.
이것에는 비즈니스 로직이 포함되어 있지 않으며 다음 커멘드를 어떻게 보내고 어디로 보낼지에 대한 로직만 포함된다.

이것은 state machine으로 구현되므로 이것이 이벤트에 응답할 때 새 command로 보내는 것 외에도 내부 상태를 변경할 수 있다.

바운디드 컨텍스트의 processManager는 command를 수신하고 이벤트를 구독할수 있다.


2. 패턴과 컨셉
비정규화된 뷰를 db에 저장하기
Read side 데이터를 저장하는 한가지 옵션은 관계형 데이터베이스 테이블을 이용하여 비정규화된 뷰를 저장하는 것
빠른 읽기를 위해 read side를 최적화해야 하므로 클라이언트의 데이터를 구성하는 데 복잡한 쿼리가 필요해서 정규화된 데이터를 저장하는데 장점이 없다.
Read side의 목표를 쿼리를 가능한 간단하게 유지하고 db테이블을 빠르고 효율적으로 읽을 수 있도록 구성해야 한다.

이 팀은 queryable 인터페이스를 사용했다. 클라이언트가 Language integrated query (LINQ) 를 사용해서 쿼리를 지정할 수 있는 Queryable 인터페이스를 반환하도록 하는 것이다.

장점

* 단순함
    * 이 접근법은 db 에 대한 추상화를 적용하여 작성해야할 코드의 양을 줄여준다. 많은 ORM 이 이 방법을 사용하고 있다.
    * 하나의 query repository 만 명시하면 된다.
    * filtering and paging and sorting 이 편리하다
* 쉬운 테스트
    * LINQ 에 대한 mocking 이 가능하다

단점

* 데이터 스토어를 쿼리가 불가능한 비관계형 데이터베이스로 변경하기 쉽지 않다. 그러나 read model 을 각각 바운디드 컨텍트에서 적절하게 구현법을 다르게 할 수 있다.
* 클라이언트가 비정규화 대신 Queryable 인터페이스를 남용할 수 있다. 비정규화된 데이터가 클라이언트의 요구사항을 충족하는지 확인해야 한다.
* Queryable 인터페이스를 사용하면 쿼리가 숨겨진다. 하지만 write side 에서 데이터를 정규화하지 않으므로 관계형 데이터베이스 테이블에 대한 조회가 복잡할 가능성은 거의 없다.


non-generic 한 DAO 를 사용

* 단순함
    * 클라이언트의 의존성이 명확해진다. 예를 들어, 클라이언트는 명시적으로 OrderSummaryDao 를 사용하므로 ViewRepository 보다 더욱 명시적으로 사용할 수 있다.
    * 대부분의 쿼리에 대해 객체에 액세스하는 방법이 명확해진다.
* 유연성
    * get 및 find 메서드는 데이터 저장소 및 데이터의 파티션 분할과 같은 세부사항을 숨긴다.
    * ORM 이나 SQL 코드와 같은 액세스 메서드를 사용할 수 있다. 이를 통해 향후 여러 결정 사항들을 쉽게 변경할 수 있다.
    * ORM 및 Queryable 인터페이스를 사용해서 데이터 저장소에서 데이터를 가져올 수 있다.
* 성능
    * 쿼리에 대한 최적화를 수행할 수 있다.
* 유지보수성
    * 모든 쿼리가 한 곳에서 정의되기 때문에 시스템의 일관성이 유지된다.

단점 
* Queryable 인터페이스를 사용하는것 보다 훨씬 복잡하다.

