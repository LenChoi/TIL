Udemy Elasticsearch 7과 Elastic Stack : 이론과 실습

표면적으로는 json으로 데이터를 사용한다.
엘리스틱외에도 Kibana를 통해 시각화 할 수 있다.
복잡한 데이터 집계 데이터 그래프 작성 로그 분석 등

엘라스틱과 키바나를 활용할 수 있음

더이상 검색에만 국한되지 않는다.


Logstash / Beats
비츠 프레임워크에서는 로그스테쉬를 사용해서 엘라스틱서치에 데이터를 실시간으로 스트리밍 할 수 있다.
검색 인덱스에 자동으로 입력하려는 웹 서버 로그가 있다면 파일빗으로 웹 서버에서 새로운 로그 파일을 찾아 구문 분석하고 엘라스틱서치에서 요구하는 방식으로 구조화해 엘라스틱 서치 클러스터에 넣을 수 있다.

X-Pack
보안 및 알림 모니터링 보고 기능이 있음
머신러닝 및 그래프 탐색 과 같은 기능 

이것을 쓰면 Flink 및 스파크에 뒤쳐지지 않는다.

클러스터에 문제가 생겼는지 상태를 이해하기 좋은 도구이다.


엘라스틱서치와 소통하려면 restapi를 써야한다. 웹서버 동작 방식과 같다.



엘라스틱서치는 JSON을 사용한다. Document는 고유 ID를 가질 수 있고 할당할수 있다.
자동 할당되게도 가능

두번쨰 개념인 Index, 인덱스는 쿼리할수 있는 가장 높은 단계의 엔티티이며 여러 다큐먼트를 포함 할 수 있다. 인덱스는 테이블과 같은 개념이고 다큐먼트는 테이블의 행이다.

하나의 Elasticsearch와 색인에는 한가지 유형의 Document만 사용할 수 있다.

즉 클러스터는 DB, 익덱스가 테이블, 다큐먼트는 테이블의 행이다.
용어만 다르고 데이터베이스와 비슷하다.

  

Inverted Index
문장을 문자열로 저장하는 것이 아니고 단아별로 해체하고 수문자로 변환
그다음 각 검색어를 해당 검색어가 포함된 문서에 포함시킨다.

the라는 단어는 대부분의 문서에 포함 될 것이다. 이 the가 진짜 의미있게 사용된걸 어떻게 찾을수 있을까?

이떄 TF-IDF라는 개념이 등장한다.

TF(단어빈도)는 지정된 검색어가 문서 내에서 나타낸 빈도
DF(문서빈도)는 인덱스 내의 모든 문서에 단어가 사용되는 빈도

단어 빈도를 문서빈도로 나누면 한 문서에서 단어가 얼마나 특별하게 사용되는지 알 수 있다.
따라서 관련성 높은 문서를 가져 올 수 있다.



엘라스틱서치의 색인을 사용하는 방법은 3가지가 있다.
- Rest api
- Client API’s / 엘라스틱서치 라이브러리
- Analytic tools: 카바나



엘라스틱서치의 확장성


핵심은 색인이 샤드라는 조각들로 나누고 샤드는 Lucene 자체의 독립적인 인스턴스이다.
컴퓨터 클러스터가 있는 경우 샤드를 여러 컴퓨터에 분산시킬 수 있다. 용량이 더 필요하면 클러스터에 더 많은 컴퓨터를 넣고 샤드를 더 분산해 효율적으로 분포 할 수 있다.

특정한 문서에 해당하는 샤드를 빠르게 알아내는 함수를 통해 클러스터내 적절한 샤드를 신속하게 찾을 수 있다.

핵심을 색인을 여러 샤드에 분산하고 샤드를 클러스터내 여러 컴퓨터에 배치하는 것


프라이머리샤드는 쓰기 요청이 처음 보내질 곳.
그 다음 데이터는 읽기 요청을 처리할 수 있는 레플리카샤드로 복사됨
엘라스틱서치의 장점은 예비자원을 스스로 관리.

만약 프라이머리가 멈추면 레플리카 노드가 프라이머리로 변경되어 동작한다.

쓰기는 프라이머리 샤드에 요청하지만
읽기는 프라이머리나 레플리카 아무거나 요청한다.

프라이머리 샤드의 수를 나중에 설정할수 없고 인덱스를 생성할떄 설정해야한다.


매핑은 스키마 정의다.


Common Mapping
1. Field types
	String, byte, short, integer 등
2. Field Index
	analyzed, not_analyzed / no
3. Field Analyzer
Standard / whitespace / simple / English


Analyzer는 3가지 기능이 ㅇㅆ다.
1. 문자필터 - HTML 인코딩 제거하고 & 기호를 단어로 변환하는 등의 작업
2. Tokenizer - 문자열을 특정한 방식으로 분할 / 언어별 방법도 있고 띄어쓰기등 방법이 있음
3. 토큰필터 - 대소문자 구분하지 않으려면 모두 소문자화 하면 된다. 또한 boxed, boxing등을 box하나로 검색되게 가능하다. Big 이랑 large랑 같게 하는 거 또한 the in 과 같은걸 제외도 가능


엘라스틱 문서는 불변이라 변경할 수 없다.
문서를 업데이트하기위해 증가한version 번호로 복사본을 생성한다.
문서는 여러 버전을 가질 수 있고 최신버전을 자동으로 사용한다.
업데이트 요청으로 하면 가장 최신의 문서가 만들어지고 이전 버전은 삭제 상태로 변하게 된다.


put명령어로 전체를 업데이트 할 수 있고 post로 부분 업데이트 가능


 

동시성 문제
Optimistic Concurrency Controller 낙관적 동시성 제어

두사람이 동시로 같은 시퀀스를 올릴려고 하면 한명만 성공하게 된다. 한명은 잘못된 요청을 했기 때문에
다른 사람은 처음부터 다시 시작한다.



Using Anlyzers
정확한 매칭을 원하면 텍스트 대신 Keyword 매핑 사용
대소문자 구분한다.

부분 일치를 수행하려면 텍스트 매핑을 하자
텍스트 매칭은 언어별로 여러가지가 있다 동의어 접두사 등등

저장공간을은 요즘 저렴하기 때문에 저장공간보다 트래픽을 줄이는게 좋은 방안 일 수도 있다.


쿼리 라이트는 간단하게 검색하기 좋지만 보안 취약성 Url 인코딩 등 문제가 있어 권하지 않는다.
